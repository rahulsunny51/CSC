/* frame.c - manage physical frames */
#include <conf.h>
#include <kernel.h>
#include <proc.h>
#include <paging.h>

/*-------------------------------------------------------------------------
 * init_frm - initialize frm_tab
 *-------------------------------------------------------------------------
 */
fr_map_t frm_tab[];
SYSCALL init_frm()
{
  //kprintf("To be implemented!\n");
	STATWORD ps;
	disable(ps);
	int i=0;
	for(i=0;i<NFRAMES;i++)
	{
		frm_tab[i].fr_status=FRM_UNMAPPED;
		frm_tab[i].fr_pid=-1;
		frm_tab[i].fr_vpno= -1;
		frm_tab[i].fr_refcnt=0;
		frm_tab[i].fr_type=FR_INIT;
		frm_tab[i].fr_dirty=0;
	}
	restore(ps);
	return OK;
}

/*-------------------------------------------------------------------------
 * get_frm - get a free frame according page replacement policy
 *-------------------------------------------------------------------------
 */
SYSCALL get_frm(int* avail)
{
  //kprintf("To be implemented!\n");
  	STATWORD ps;
        disable(ps);
	int i=0;
        for(i=0;i<NFRAMES;i++)
        {
		if(frm_tab[i].fr_status==FRM_UNMAPPED)
		{
			*avail=i;
			restore(ps);
		        return OK;

		}
	}
	restore(ps);
	return SYSERR;
}

/*-------------------------------------------------------------------------
 * free_frm - free a frame 
 *-------------------------------------------------------------------------
 */
SYSCALL free_frm(int i)
{

  //kprintf("To be implemented!\n");
  	STATWORD ps;
        disable(ps);
	if(i>=0 && i<1024)
	{
		frm_tab[i].fr_status=FRM_UNMAPPED;
                frm_tab[i].fr_pid=-1;
                frm_tab[i].fr_vpno= -1;
                frm_tab[i].fr_refcnt=0;
                frm_tab[i].fr_type=FR_INIT;
                frm_tab[i].fr_dirty=0;
		restore(ps);
                return OK;
	}
	restore(ps);
        return SYSERR;
}



